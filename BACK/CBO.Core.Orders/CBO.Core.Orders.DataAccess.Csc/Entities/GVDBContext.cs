// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CBO.Core.Orders.DataAccess.Csc.Entities
{
    public partial class GVDBContext : DbContext
    {
        public GVDBContext()
        {
        }

        public GVDBContext(DbContextOptions<GVDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<AgentType> AgentTypes { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DrivingOrder> DrivingOrders { get; set; }
        public virtual DbSet<DrivingOrderType> DrivingOrderTypes { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleClass> VehicleClasses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Agent>(entity =>
            {
                entity.ToTable("Agent");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AgentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentSecret)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentSurname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.DomainName)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<AgentType>(entity =>
            {
                entity.ToTable("AgentType");

                entity.Property(e => e.AgentTypeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("Company");

                entity.Property(e => e.CompanyEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyMainContactPhoneNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyOIB)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyOwnerName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyOwnerSurname)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<Driver>(entity =>
            {
                entity.ToTable("Driver");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.DriverDispatcherNote).IsUnicode(false);

                entity.Property(e => e.DriverName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DriverPhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DriverSurname)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<DrivingOrder>(entity =>
            {
                entity.ToTable("DrivingOrder");

                entity.Property(e => e.BillingPartner)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatcherRemark).IsUnicode(false);

                entity.Property(e => e.DriverRemark).IsUnicode(false);

                entity.Property(e => e.DrivingOrderCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DrivingOrderDate).HasColumnType("datetime");

                entity.Property(e => e.FlightCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FlightName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KilometersAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.LastUpd).HasColumnType("datetime");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingPartnerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PaxName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaxSurname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegionalCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransferDeparture)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransferDestination)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransferMain)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DrivingOrderType>(entity =>
            {
                entity.ToTable("DrivingOrderType");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.DrivingOrderTypeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<Partner>(entity =>
            {
                entity.ToTable("Partner");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.PartnerCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PartnerDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.ToTable("Vehicle");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.VehicleColor)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleModel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleYear)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VehicleClass>(entity =>
            {
                entity.ToTable("VehicleClass");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastUpd)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdApp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.VehicleClassName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}